<!-- $Id$ -->
<?php

#	functions specific to auth

#  Copyright (C) 2003  ken restivo <ken@restivo.org>
#
#  some stuff lifted from
#  POST-NUKE Content Management System
#  Copyright (C) 2001 by the Post-Nuke Development Team.
#  http://www.postnuke.com/
#  ----------------------------------------------------------------------
#  Based on:
#  PHP-NUKE Web Portal System - http://phpnuke.org/
#  Thatware - http://thatware.org/
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details. 
# 
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


require_once("movetoshared.inc");


#thank you, phpnuke
define('ACCESS_INVALID', -1);
define('ACCESS_NONE', 0);
define('ACCESS_SUMMARY', 100);
define('ACCESS_VIEW', 200);
define('ACCESS_EDIT', 500);
define('ACCESS_ADD', 600);
define('ACCESS_DELETE', 700);
define('ACCESS_ADMIN', 800);

$accessnames = array(  
		  0 => _ACCESS_NONE,
		100 => _ACCESS_SUMMARY,
		200 => _ACCESS_VIEW,
		500 => _ACCESS_EDIT,
		600 => _ACCESS_ADD,
		700 => _ACCESS_DELETE,
		800 => _ACCESS_ADMIN
);



/******************
	SAVEPASSWORD
	commits this user's new/changed password to the database
	inputs: uid, password in clear text
	returns: a token, generated by call to generateToken()
******************/
function 
savePassword($uid, $clearpass)
{
	// be paranoid
	if(!($uid && $clearpass)){
		print "savePassword(): ERROR! need to pass in a uid AND a password\n";
		exit(1);
	}

	$hash = strtolower(md5($clearpass));

	$query  = sprintf("update users set password = '%s' where userid = %d --",
				$uid, $hash);
	mysql_query($query);
	$err = mysql_error();
	if($err){
		//TODO: log this, don't display it
		print "savePass(): [SECRET]: $err\n";
		return 0;
	}
	
	return generateToken($uid, $hash);

} /* END SAVEPASSWORD */
					


/******************
	GETPASS
	get the password hash stored for this user, 
	inputs: uid
	returns: the hash if OK, 0 if no password, or -1 if no user!
******************/
function 
getPass($uid)
{
	// sanity check
	if($uid < 1){
		print "getPass(): ERROR! $uid < 1\n";
		exit 1;
	}

	// the query
	$query = sprintf("SELECT * FROM users WHERE userid = %d --",
				$uid );
	$listq = mysql_query($query);
	$err = mysql_error();
	if($err){
		#TODO: log this, don't display it
		print "getPass(): [SECRET]: $err\n";
	}
				
	while($row = mysql_fetch_assoc($listq)){
		//grab 'em all
	}

	if (mysql_num_rows($result) > 0) {
		if($row['password']){
			return generateToken($uid, $row['password']);
		}
	}                  

	return 0;
} /* END GETPASS */


/******************
	GENERATETOKEN
	inputs: uid, the hashed password from the db
	returns: a token (md5 hash of hashed passwd in db, and uid
******************/
function
generateToken($uid, $passhash)
{	
	if(!($uid && $passhash)){
		print "generateToken(): ERROR! need to pass in a uid AND a hash\n";
		exit(1);
	}
	//ok, the hash
	return md5($uid . strtolower($passhash));
			
}/* END GENEREATETOKEN */


/******************
	CHECKTOKEN
	check that the token is valid for this uid
	inputs: uid, token
	returns: 0 if ok, 1 if failure
******************/
function
checkToken($uid, $token)
{
	if(!($uid && $token)){
		print "checkToken(): ERROR! need to pass in a uid AND a hash\n";
		exit(1);
	}

	// seemple
	if($token == getPass($uid, $token)){
		return 0;
	}	
	
	return 1;
}/* END CHECKTOKEN */


/******************
	CHECKAUTHLEVEL
	check that this uid is authorised to do this action
	inputs: uid, token, realm, level(action)
	returns: 0 if ok, 1 if failure
******************/
function
checkAuthLevel($uid, $token, $realm, $level)
{
	if(($err = checkToken($uid, $token) > 0){
		return $err;
	}

	// the query
	$query = sprintf("
			SELECT * FROM privs 
				left join users on users.userid = privs.userid
			WHERE privs.userid = %d 
				and privs.realm = '%s'
				and privs.level > %d
			--",
			$uid, $realm, $level
		);
	$listq = mysql_query($query);
	$err = mysql_error();
	if($err){
		#TODO: log this, don't display it
		print "checkAuthLevel(): [SECRET]: $err\n";
	}
				
	if (mysql_num_rows($result) > 0) {
		return 0;
	}                  

	return 1;
}/* END CHECKAUTHLEVEL */

/******************
	DISPLAYLOGIN
	inputs: uid, token 
	outputs: shows who they are logged in as, and a "logout" button
			or, a "login here" link
******************/
function
displayLogin($uid, $token)
{

	
	// well, they're not.
	if(!($uid && $token)){
		printf("You are NOT logged in. <a href='%s'>Login here</a>",
			//XXX should this be menu.php?
			$_SERVER['PHP_SELF']);
		return;
	}

	// reflexively check the token first
	if(($err = checkToken($uid, $token) > 0){
		print "displayLogin(): bad login!\n";
		return;
	}

	// the query
	$query = sprintf("
		SELECT family.name 
			FROM users 
			left join families on families.familyid = users.familyid
			WHERE users.userid = %d --",
				$uid );
	$listq = mysql_query($query);
	$err = mysql_error();
	if($err){
		#TODO: log this, don't display it
		print "displayLogin(): [SECRET]: $err\n";
	}
				
	// sanity czech
	if (mysql_num_rows($result) < 1) {
		print "displayLogin(): ERROR! no name for family with uid $uid?\n";
		return;
	}

	while($row = mysql_fetch_assoc($listq)){
		$name = $row['name']; 
	}

	printf("You are logged in as %s. <a href='%s'>Logout here</a>",
		$name, $_SERVER['PHP_SELF']);

}/* END DISPLAYLOGIN */


#note bin2hex... do i need it?

?>
<!-- END AUTH -->
