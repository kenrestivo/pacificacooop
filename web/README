README the pacifica co-op nursery school database web interface
$Id$


this uses PEAR, particualrly HTML::QuickForm and DB::DataObject
i tried to make it backwards-compatible to DB_DataObjects_FormBuilder ("FB")
fields i added to the dataobject, which are *not* in FormBuilder

vars in DataObject (in objects directory):
fb_URLFIelds array(fieldn...)
fb_joinPaths  array(table -> path:tghrough:links or array(path:through, more:through)). 
    used for disambiguating constrainschoolyear() and constrainfamily(),
        if there are multiple
    the path can be either one or more, if there are >1, it is coalesced
fb_usePage    "" (old page)
fb_longHeader "" (old summary, if applicable)
fb_shortHeader "" (old shortdesc)
fb_dupeIgnore array(fieldn...)
fb_sizes  = array(field, size)
fb_fieldsToUnrender (always hide these! annoying, but needed.)
fb_displayFormat  array (field => sprintffrormat)
fb_displayCallbacks = array (field => cb) overrides CoopView::toArray()
     the result of you callbacks WILL NOT be html escaped. that's your job.
fb_viewActions = array  (action => level)
fb_recordActions = array  (action => level)
fb_extraDetails = array('path:to:other:details', 'path:to:more:details')
    // basically, backlinked tables i want to display. kind of a hack.
fb_allYears = 0/1 // show all years by default in schoolyearchooser
fb_noHTML = 0/1  // use text, not html
fb_addNewLinkFields = OBSOLETE. i use perms now to determine
fb_searchSelects = array() fields for searchselect. XXX HACK-- will use N instead
callbacks in DataObject (in objects directory):
fb_linkConstraints() = called by linkconstraints. 
        overrides the defaults in COopObject
fb_display_[view|details|alert"summary]() = called by the dispatcher. 
        overrides the default view, details, alert, or summary
afterForm() = this is called by dispatcher, after the form is rendered
         use it to display any other things that do not go in the form itself
beforeForm() = this is called by dispatcher, BEFORE the form is rendered
         use it to display any other things that do not go in the form itself
        what sucks about this is using this stuff for positioning, instead
        of CSS or templating, but this is what I got for now
postGenerateForm() compatibility with FB. called after the $form->build()
preGenerateForm() compatibility with FB. called before the $form->build()
afterInsert() = called, um, after insert. things that need to know the ID/key



in coopview
fullText (do not truncate longtextfields)
linkdisplayfields is a SUPERset of fieldstorender, in simpletable at least

unique app-specific tweaks:
family_id and school_year are *special* fields
	both are:
		automatically populated with defaults in form, if empty
			using quickform setdefaults, so any setting overrides it
		automatically searched for in genericview, IFF perms require it!
	family_id
a field *must* be in fb_fieldLabels or it won't get rendered. do it.


to create a new table: est time per table: 1-2 hours
	add to sql/definitions.sql and then copy/paste definition into SQL
	cd web; make update-dbobject update-links
	edit the resulting table in objects/Tablename.php
		fbformheadertext and fbshortheader and fblongheader
		fbrequiredfields
		fbfieldlabels
		linkdisplayFields
        linkConstraints() function
		optional
			fbcrosslinks
			any overrides: fb_display_FOO, pre/postgenerateform, etc
	add it to a realm
		optionally add a realm if not already there
		if the realm is new, add a default to user_privileges
	add it to table_privileges, with menu/usr/group level


if you ever, *ever* rename a table:
    update table_permissions set table_name = 'new_name' where table_name = 'old_name';
    update audit_trail set table_name = 'new_name' where table_name = 'old_name';

you MUST USE a local copy of PEAR. install it in some directory, i.e. your shell directory, and put that path into the dbhost.inc

lynx -source http://go-pear.org/ | php
set the paths correctly! expect libs in managed_pear/lib and data in managed_pear/data


then you must install PHPTAL packages for PHP4
first go get: Algo_map-0.1.1.tgz  HTML_Template_PHPTAL-0.7.0.tgz GetText-0.6.4.tgz   Types-0.3.2.tgz
then pear -c ~/.pearrc install <list of above package tarballs>
    i don't know what they are for php5

you must also install tiny_mce. i had this in cvs but it was ridiculous.
    so you have to find it, download it, and install it, in the 'lib' directory

------------
old AUTH permissions system
auth
	why are users not families??? why create a shadow abstraction?!
		well, because users are NOT families! 
			there can be non-family users: i.e. teacher sandy/catherine/pat
			i want to grant privs to the Roster person to add/change families
				but NOT to administer user privileges!
				that task will go to the webmiester/administrator/board
	realms: areas of privilege
		these are mostly arbitrary, but do center around various "views"
		realms are neither tables nor views nor committees. 
			they are orthoganal to all of them. yes, i know this is confusing.
		auction: family auction-related stuff. roughly "auction committee"
		calendar: the calendar of events
		flyers: the flyer placement. roughly the "publicity committee"
		insurance: insurance information. roughly the "insurance coordinator"
		invitations: springfest invitations. roughly the "invitation committee"
		money: income received. roughly springfest coordinator, and treasurer
		packaging: stuff related to packaging up auctions. mostly pkg committee
		raffle: stuff related to the raffle. mostly raffle and quilt committees
		roster: the roster. mostly the roster coordinator
		nag: the nag people.
		solicitation: related to solicitation. mostly "solicitation committee"
		user: user administration. mostly the membership, board, and web
	user and group levels, each has an access level
	ACCESS LEVELS  are:
		'ACCESS_INVALID', -1);
			bad user name. soemthing wicked happened
		'ACCESS_NONE', 0);
			no access.	
		'ACCESS_SUMMARY', 100);
			can view the totals (summaries) for this realm
		'ACCESS_VIEW', 200);
			can view the details of data for this realm	
		'ACCESS_VIEWALL', 300);
			depreciated. not used
		'ACCESS_EDIT', 500);
			can edit existing records in this realm
		'ACCESS_ADD', 600);
			can add new records for this realm
		'ACCESS_DELETE', 700);
			can delete records for the realm
		'ACCESS_ADMIN', 800);
			can change privileges for users relating to this realm
	$auth struct
		uid: the user_id. duh
		pwd: the password supplied by the user. 
		confirm: the confirm password supplied by the user
		token: a hash of the md5 hash of the password, and the uid
		state: what state of auth they are in
	$p struct
		TODO document me
	$u struct: returned by getUser():
		username
		familyname
		family_id
	each field can have its own perms. field perms are a LIMIT
		if the user/group has at LEAST the field's perm levels, 
			it can do that action
			basically it means: limit THIS action to only people with perms
				i.e, edit perms on group = only  groupperms >= view can edit
		so to calculate a perm for a field, fieldPerms() factors in:
			the DESIRED action
			the field's GROUP level
			the field's USER level
			whether the desired action is on the user's own family or another
			the user's USERLEVEL privileges
			the user's GROUPLEVEL privileges


---------------

database things:
	in general, i've been a relational database structure bigot. i am VERY much for segregation of data into separate tables, and ESPECIALLY where there's any duplication of data. any one-to-many's are done with direct joins, and many-to-many's are done with join ("glue") tables. often the join tables evolve into tables with useful data in their own right (example being the "attendance" table) and get their own names.



