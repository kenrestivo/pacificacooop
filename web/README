README the pacifica co-op nursery school database web interface
$Id$


this uses PEAR, particualrly HTML::QuickForm and DB::DataObject
i tried to make it backwards-compatible to DB_DataObjects_FormBuilder ("FB")
    i document below the fields i added to the dataobject, 
        which are *not* in FormBuilder
    note: FB compatibility has been abandoned as a design goal.
        the app has grown well beyond the bounds of FB.


the core of the application is basically a few files/classes:

CoopObject: base class. wrapper around DB_DataObject, app-specific db stuff
	CoopView: for displaying data, in tabular format. uses HTML_Table for now
				also has lots of formatting stuff but that should get moved
	CoopForm: for editing and saving data. wraps HTML_QuickForm 

CoopPage: "globals" for the application, and app-wide utility functions
	does some of the stack handling too
    CoopTALPage: subclass of CoopPage for template-based rendering
    CoopPDF: subclass for rendering as a PDF using PDML and FPDF libraries

CoopNewDispatcher: for navigating states, the 'action' GET/POST var
					callbacks in this will 'dispatch' to views, forms, etc


this is a Big Pig of an app from a memory and CPU standpoint. if you do development on it, you'll want to change the .htaccess periodically to bump the "php_value memory_limit" and possibly max_execution_time too.

essential vars that the system uses:
(they go in the DataObjects (in objects directory)
-----------------
fb_URLFIelds array(fieldn,)
fb_joinPaths  array(table -> path:tghrough:links or array(path:through, more:through)). 
    used for disambiguating constrainschoolyear() and constrainfamily(),
        if there are multiple
    the path can be either one or more, if there are >1, it is coalesced
fb_usePage    "" (old page)
fb_shortHeader = used in menu, and in table popps 
fb_dupeIgnore array(fieldn...)
fb_sizes  = array(field => size), this is WIDTH for inputfields, LINES for textarea!
fb_fieldsToUnRender (always hide these! annoying, but needed.)
preDefOrder= array(), compatible with FB, order the fields in this sequence
    remember, fieldlabels is NOT ordered, php assoc arrays aren't ordered!
fb_displayFormat  array (field => sprintffrormat)
fb_displayCallbacks = array (field => cb) overrides CoopView::toArray()
     the result of you callbacks WILL NOT be html escaped. that's your job.
fb_viewActions = array  (action => level): by default,  CoopView::actionButtons()offers the user the default actions in viewActions. you can override this here, to add actions, override perms on the default actions, etc
fb_recordActions = array  (action => level)
fb_extraDetails = array('path:to:other:details', 'path:to:more:details')
    // basically, backlinked tables i want to display. kind of a hack.
fb_allYears = 0/1 // show all years by default in schoolyearchooser
fb_forceNoChooser = 0/1 a HACK! for summaries which share one schoolyearchooser
fb_forceCustomSelect = 0/1 A NASTY HACK! because my searchselect doesn't go deep
    into links. some tables are ALL links, i need to force them to be popups


callbacks...  also in the DataObjects (in objects directory):
----------------
fb_linkConstraints() = called by CoopObject::linkconstraints()
        overrides the defaults in COopObject
fb_display_[view|details|alert"summary]() = called by the dispatcher. 
        overrides the default view, details, alert, or summary
homepage_summary() = ONLY to be displayed on members and/or public homepage
    distinct from fb_display_summary() which is shown at view, possibly add/edit
afterForm() = this is called by dispatcher, after the form is rendered
         use it to display any other things that do not go in the form itself
beforeForm() = this is called by dispatcher, BEFORE the form is rendered
         use it to display any other things that do not go in the form itself
        what sucks about this is using this stuff for positioning, instead
        of CSS or templating, but this is what I got for now
postGenerateForm() compatibility with FB. called after the $form->build()
preGenerateForm() compatibility with FB. called before the $form->build()
afterInsert() = called, um, after insert. things that need to know the ID/key



in coopview
-----------
fullText (do not truncate longtextfields)
linkdisplayfields is a SUPERset of fieldstorender, in simpletable at least


in cooppage
------------
(list vars here)

unique app-specific tweaks:
-----------------------
family_id and school_year are *special* fields
	both are:
		automatically populated with defaults in form, if empty
			using quickform setdefaults, so any setting overrides it
		automatically searched for in genericview, IFF perms require it!
	family_id
a field *must* be in fb_fieldLabels or it won't get rendered. do it.




how to create a new table: est time per table: 1-2 hours
-------------------------
	add to sql/definitions.sql and then copy/paste definition into SQL
	cd web; make update-dbobject update-links
	edit the resulting table in objects/Tablename.php
		fbformheadertext and fbshortheader
		fbrequiredfields
		fbfieldlabels
		linkdisplayFields
        predeforder
        linkConstraints() function
		optional
			fbcrosslinks
			any overrides: fb_display_FOO, pre/postgenerateform, etc
	add it to a realm
		optionally create a new realm if not already there
		if the realm is new, add a default to user_privileges
	add it to table_privileges, with menu/usr/group level


if you ever, *ever* rename a table (avoid it like the plague):
    update table_permissions set table_name = 'new_name' where table_name = 'old_name';
    update audit_trail set table_name = 'new_name' where table_name = 'old_name';
    this in addition to any code changes wherever that table may be used


dependencies you must install separately:
---------------------------------------
requires PHP version 4.3.10 or higher

run members/qa/include-test.php to check whether all the includes are OK

PEAR-related dependencies:
    PEAR:HTML:QuickForm
    PEAR:HTML:Table
    PEAR:HTML:Menu
    PEAR:DB:DataObject
    PEAR:Mail
    PEAR:Text:Diff
    PEAR:Spreadhseet:Excel:Writer
    PEAR:HTML:Template:PHPTAL
    PEAR:Types:Iterator
    PEAR:Types:Ref
    PEAR:Algo:Map
    
    you MUST USE a local copy of PEAR. 
        install it in some directory, i.e. your shell directory, 
            and put that path into the dbhost.inc
        lynx -source http://go-pear.org/ | php
        set the paths correctly! expect libs in managed_pear/lib 
            and data in managed_pear/data
        then you must install PHPTAL packages for PHP4
            first go get:
                   Algo_map-0.1.1.tgz  
                   HTML_Template_PHPTAL-0.7.0.tgz 
                   GetText-0.6.4.tgz   
                   Types-0.3.2.tgz
            then pear -c ~/.pearrc install <list of above package tarballs>
                i don't know what they are for php5
        
tiny_mce:
    you must manually install tiny_mce. i had this in cvs but it was too big.
    so you have to find it, download it, and install it, in the 'lib' directory
    i'm currently using version 2.0 from 12/01/2005
        should probably keep this up to date, new bugfixes, browser compat, etc


THE STACK
-----------
the "stack" handling is the core of this application. the "stack" is a lifo which is stored in a session var. it lets users bounce between pages and save state it also lets the pages send "messages" to another: basically modify each other's states, and particularly the trio of (current, previous, next) page

stack-related data
    CoopPage::vars is also $_SESSION['cpVars']
        gets saved in session_info table 'vars' contains:
        'last': the CURRENT state. i know it's called 'last'. that sucks
                inside that:
                 action
                 table
                 pop ???
                 id: the CURRENT id.
					ets ttransformed from the table-field format
                 realm: ?? why?
				submitvars: the quickform vars. i have to save them here
							because QF dumps a lot of crap into the space
							and because i need to clear them out afterwards!
		'prev': ugly, nasty hack. keeps a copy of what was popped
				this is used for checking status of previous operation
	    'stack': a lifo of 'last' arrays, basically

stack-related actions
   push:  you 'push' by including a variable 'push' in an http GET/POST request
          this is how a page sends a message to the NEXT page,
           to save the previous state before proceeding
   pop:  you 'pop' by either setting 'pop' in GET/POST, or setting it in 'last'
		i.e. some page sets it for future
		replaces whatever is in last, with whatever was last on stack
		inserts whatever was in last, into 'prev'. yes, this sucks

ugly stack hacks:
	i use CoopPage::getPreviousStack() to modify the previous stack frame
		so that when you pop it off, your new data is there
		i find this repulsive, but it's necessary in a few places. sorry.


    

------------
pre-PEAR AUTH permissions system which is still in use
auth
	why are users not families??? why create a shadow abstraction?!
		well, because users are NOT families! 
			there can be non-family users: i.e. teacher sandy/catherine/pat
			i want to grant privs to the Roster person to add/change families
				but NOT to administer user privileges!
				that task will go to the webmiester/administrator/board
	realms: areas of privilege
		these are mostly arbitrary, but do center around various "views"
		realms are neither tables nor views nor committees. 
			they are orthoganal to all of them. yes, i know this is confusing.
		auction: family auction-related stuff. roughly "auction committee"
		calendar: the calendar of events
		flyers: the flyer placement. roughly the "publicity committee"
		insurance: insurance information. roughly the "insurance coordinator"
		invitations: springfest invitations. roughly the "invitation committee"
		money: income received. roughly springfest coordinator, and treasurer
		packaging: stuff related to packaging up auctions. mostly pkg committee
		raffle: stuff related to the raffle. mostly raffle and quilt committees
		roster: the roster. mostly the roster coordinator
		nag: the nag people.
		solicitation: related to solicitation. mostly "solicitation committee"
		user: user administration. mostly the membership, board, and web
	user and group levels, each has an access level
	ACCESS LEVELS  are:
		'ACCESS_INVALID', -1);
			bad user name. soemthing wicked happened
		'ACCESS_NONE', 0);
			no access.	
		'ACCESS_SUMMARY', 100);
			can view the totals (summaries) for this realm
		'ACCESS_VIEW', 200);
			can view the details of data for this realm	
		'ACCESS_VIEWALL', 300);
			depreciated. not used
		'ACCESS_EDIT', 500);
			can edit existing records in this realm
		'ACCESS_ADD', 600);
			can add new records for this realm
		'ACCESS_DELETE', 700);
			can delete records for the realm
		'ACCESS_ADMIN', 800);
			can change privileges for users relating to this realm
	$auth struct
		uid: the user_id. duh
		pwd: the password supplied by the user. 
		confirm: the confirm password supplied by the user
		token: a hash of the md5 hash of the password, and the uid
		state: what state of auth they are in
	$p struct
		TODO document me
	$u struct: returned by getUser():
		username
		familyname
		family_id
	each field can have its own perms. field perms are a LIMIT
		if the user/group has at LEAST the field's perm levels, 
			it can do that action
			basically it means: limit THIS action to only people with perms
				i.e, edit perms on group = only  groupperms >= view can edit
		so to calculate a perm for a field, fieldPerms() factors in:
			the DESIRED action
			the field's GROUP level
			the field's USER level
			whether the desired action is on the user's own family or another
			the user's USERLEVEL privileges
			the user's GROUPLEVEL privileges


---------------

database things:
	in general, i've been a relational database structure bigot. i am VERY much for 3nf normalisation of data into separate tables, and ESPECIALLY where there's any duplication of data. any one-to-many's are done with direct joins, and many-to-many's are done with join ("glue") tables. often the join tables evolve into tables with useful data in their own right (example being the "attendance" table) and get their own names.



-----------
misc stuff:

pdml/fpdf:
    PDF printing uses pdml and fpdf, 
    which are both included in this application via CVS
    pdml is nasty. it's not really HTML, it just kind of *smells* like it
    but it's better than the alternative: manually specifying PDF's with fpdf
    the right way to do this would be with XSLT and XSL-FO, but we can't
        because it requires java and JSP, and our web host doesn't support that


