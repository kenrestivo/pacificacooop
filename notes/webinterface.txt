notes on web interface
$Id$

main page (with no POST/GET fields)
	popup for choosing family  DONE
		(java auto-submit, and official SUBMIT button too)

main page (with family POST/GET'ed)
	show family information
		parents, kids, session, um... not needed for this
	show number of names, and how many to go until 10 (duh) DONE
	show the actual names entered so far DONE
	entry form
		pick up the parentid from the top (the popup should be inside the form)
		table of 10 entry fields
			last (required)
			first (required)
			business/company
			addr1 (required)
			addr2
			state/province (required, "CA" default)
			zip/postalcode (required, "94044" default)
			oountry (required, "USA" default)
			relationship (required, popup)
				relative, friend, co-worker, alumni, other
		of course, the submit/save button!

admin page
	choose 
		(all families, families with less than 10 names)
		by date
			default next milestone from today
		detailed (all names) or summary (default)
	table of families, and how many names have been entered so far
		um, by certain dates?
		only the delinquent ones?
		and, with email and phone and am/pm (heh) for the springfest cops to use

---------------
OK, CODE!

10names code
	drawing the popup DONE
		query all families. doy.
		if there's an id in POSTVARS, use that one as default. otherwise, CHOOSE
	drawing the basic parent and kids info DONE
		tested tables: col for parents, col for kids
		simple query: into table
	drawing the names-to-date info DONE
		simple query, again.
		it would be nice to show how many days left until cutoffdate
	drawing the web form DONE
		name the fields in a loop: name1, name2, addr1, addr2
		invis field with parentid: because there'll be no popup on this page
		will need a cancel button! so people can get outta there
	czeching DONE
		go through all rows (entry1-x)
			ok, check DONE
				compare with the $fields global
				check that required's have data in 'em
				check that they're less than len or 254 (maybe)
				if not, return an array to display
					copy an empty fields array
					stuff the entered values into =>def
						i'll need to htmlspecialchars() the data first!
					stuff the error description into => error
						and red comments showing what is wrong/missing
			if they are ok, save them! DONE
				send the row array to a save function
					i will need mysql_escape_string() for db insertion!
						or addslashes()
			report broken ones DONE
				create an array of arrays
				redisplay the form, but it will show up as an error form
		should also check that it isn't a duplicate,  DONE
			that someone else hasn't entered it already

admin code
	drawing the chooser (as above and in reprots.txt)
	draw the report

file layout DONE
	like 5mins
	common folder
		dbfuncs.php
		shared.php
			most everything!
				assume it goes here
				popup, parentinfo
		globals.inc
			the HTTPVARS globals etc
			include the dbname
		dbname (for testing)
	index.php
		the basic page display
			if no familyid, 
				draw the chooser,
				done
			else if there is form stuff (how to tell?)
				do the datachecking	
			else draw 
				the basic parentid,kids, names
				and the form!
		header/footer stuff
	10names.php
		specifics to this thing
		names-to-date
		the web form	
		the submission handling
	admin.php
		the reports!
	money.php
		the input for money stuff

texts
	spring fest 10-names donations
		every family must provide the names of 10 people who should be invited to 
			attend or donate to springfest. you must enter these names by 11/04/2003
	choose the name of your family (child's last name)
	you have entered x names so far. you have x days left to enter x more names!
		or.. congratulations! you have already entered your 10 names!
	add more names
		

misc
	array for fields
		including which are required, what defaults, etc
	

money
	an input screen, to enter 
		payer, 
		check num, 
		date (on check?), 
		category  (popup)
			10-names forfeit charge
			food/quilt
			3x5 card forfeit charge
		family popup (if 3x5, quilt, or 10namesforfeit) 
			grab this from 10names
		or, if an RSVP, response code, which is the leadid 
			(future, for RSVP cards: not right now)


security: http auth
	augh. a complete auth model
		users with userid's
			link to parents or families, for further auth
			password (md5)
			are users ALWAYS gonna be parents? add password to parents table?
				if so, i can add the password to the parents table?
			and username/uid. hmm. 
		a userprivs table (many to many to users and areas)
			various mysql-esque booleans with privs
			view
			add
			delete
			edit
			what about su?
				what if i want to have su privs, just view. or just add?
				specifically, privs to edit user privs?
		an area or domain or realm
			"area" being, things. 
				10names
				money
				3x5 (text, not money)
				what else?
		ah!  postnuke is nifty.
			uid
			realm (10names, money, 3x5)
			compennt (i.e. plugin, not releavnt here)
			instance (wha?) i could mean: own family, ALL families, PM families?
			level (action! view/add/delete/edit)
		ugh. if i am truly going to have secure keys, i need a SESSION table
			with randumb number, used for auth'ing actions.
			for super security, regenerate this randumb number for each action
	http auth "login", and a token that gets passed around!
		let's try it as a function, on the money page. no login, no dice.
		footer: a "logged in as" and/or "log out" on every page!
	ah, at some time, an interface for managing user privs!



Basically, it'll be something similar to your report, 			
	but with a FORM on each line, 
		each containing an EDIT button 
			and a hellacious number of hidden fields. 
		That FORM's action would just call the 
			entry screen, and, as if by magick, 
				the user should see all the values 
				pre-populated and ready for editing. 
		A DELETE button could sit in that FORM too, 
			and the main loop would then call a new delete function, 
				possibly throwing up an "are you sure" beforehand....  
					no rest for the wicked.
		The main loop would, 
		if it sees "edit", call the save function with a (new) arg, 
			so that it knows that we're changing not saving, 
			and can conditionally use "update" in the SQL query instead of "insert", 
				DONE
	i either need multiple forms to call, or, have a smart form
		that knows whether it's being called to edit, delete, etc
			where is this now?

goal: simple, reasonably secure way to authorise actions by users
	secure against: accidental misuse, privilege elevation
	NOT secure against: replay attacks or packet sniffing
		
concepts/data structures
	password: passed on the wire as clear text ONCE, when first logging in
		(or TWICE, when user chooses it for the first time, for confirmation)
		stored in hashed format in database: admin/developers can't read it
	token: an md5 hash of the uid and the password's hash
		this opaque token is what gets passed around as the user surfs the site
	realm: an "area" of the site
		invitations, money, auction, roster, insurance, menu, users
	uid: a user, distinct from family, but joined to a family.
	level(action): levels of authorisation for this user and realm
		none, summary, view detail, edit, add, delete, admin(superuser)

auth.inc: the library functions
	checkToken(): check that the token is valid for this uid
		inputs: uid, token
		returns: thumbs up or thumbs down		
	generateToken()
		inputs: uid, password
		returns: a token
	savePassword(): commits this user's new/changed password to the database
		inputs: uid, password
		returns: a token, generated by call to generateToken()
	checkAuthLevel(): check that this uid is authorised to do this action
		inputs: uid, token, realm, level(action)
		returns: thumbs up or thumbs down	
	displayLogin()
		inputs: uid, token 
		outputs: shows who they are logged in as, and a "logout" button
	logIn(): logs a user in. abstracted here to be used in several places
		inputs: authstruct
		state machine:
			default:
				inputs: nothing, optional uid or action
				outputs: entry box form!
						userpopup (uid selected?)
						password field
					if no password in database
						next action(invis): new
					else next action(invis): login
			login:
				inputs: clearpass, uid
				outputs: if 
			new: 
				inputs: clearpass, uid, action
				outputs: confirmation entry box
						clearpass/uid hash! (invis)
						uid(invis)
					next action(invis): confirm
			confirm: 
				inputs: uid, action, pass(hashed), confirmpass, opt token
				actions:
					if check pass does NOT meet criteria
						message: complain 
						next action(invis): none/default!
					if no pass in db
						save pass!
						return token
					else
						check OLD password first?
				outputs: 
					message: your new password has been entered. remember it
	future:
		changePass()?
			if suid isn't same, force the user to log back in
		state machine
			change:
				inputs: uid, action, pass, user token, suid, suid token
				actions: 
					if suid is authorised to change this user


user notes
	users != roster, so ann edminster can add/edit families with impunity
		without giving her permissions on users
	hmm. this could be neat! 
		someone that has admin privs on a realm, can edit privs FOR THAT REALM!
		so... i can give carrie admin privs for invitations, donations, money
			and give admin privs on all realms to matt.
		user realm is for adding/deleting users (or, admin privs on user realm)


menu.php: a nice launching point for things!
	call auth.inc:login() and die if it fails. else...
	show friendlyHappyWelcome from 10names
	show parents and kids in this family, 
		and some roster information: what session (AM/PM), etc.
	menu of choices
		call auth.inc:checkAuthLevel() before displaying each choice
		- enter 10names 
		- enter 3x5 cards 
		- edit roster information (phone, email, name spelling, etc)
		- show insurance information
		- enter checks (if authorised for "money" realm)
	show SUMMARY for each choice too
		a form? a table?
			form MAY be ok, if you are only going to pages that'll cycle
		ITEM  SUMMARY  ACTION
			action will need to be intelligent based on privs!
		something tells me this should come from EACH individual .inc
			i.e. 10names.inc includes the summary and action function for it
			money includes summary/aciton functions for it
		need to have a "main menu" form-ish button on all subsequent pages too
			and, it needs to pass vars grr.
			

admin.php: administrative tasks
	forcibly re-log them in with auth.inc:logIn() 
		so we are reasonably sure that they know their OLD password
	if checkAuthLevel() is ok, 
		call newPass()
	in future, there may be other admin tasks. when so, put up menu of them here

ok.. STATE MACHINE!
	has no password
	has a password entered
	not logged in
	logged in
	unconfirmed new password	
	detour over!

for future reference: a php/sql forum/groupware package
	for agenda items, documents, attachments, schedules, reminders, comments
	to keep history of the project
	much like BayForums we used at bay!
	phpgroupware is a debian package

--------
next phase gui/schema

contact management
	company table (for solicitation)
		company
		address, city, state,zip
		phone, fax, email
		territoryid (join)
			or temporary familyid hack, or territory-family id.
		dead contact flag/date: do not contact. essentially, an obsolete-after date.
		userid, entered, updated
	contact table
		first,last
		companyid (join)
	territory table 
		description (crespi, rockaway, etc)
		hmm. alumnae/member familyid? or... track that elsewise?
	territory-family (persistence!) join table
		include sessionid! this'll change year-to-year!
	contactnotes table
		contactid
		entered/updated (don't allow updates! it's history, it stays)
		note (longtext)
	contact-to-income join table
		to handle any stray non-categorized donations. ugly but will need this.
	contact-to-auction join table (like fajoin)
		to handle any donations of hard goods

ad insertion 
	ad table
		contactid (join)
		sessionid (join)
		adsizeid (join)
		ad copy (longtext)
		artwork_provided flag?
		fileid(join) -- for artwork submitted
		weblinkid (link to weblink join table. heh. link.)
		incomeid(link) -- to handle payment... or join if many payments!
		userid, enteredupdated?
	adsize table
		description (varchar)
		size? or use above?
		price

web links stuff
	link table
		displaytext
		fileid(join)
		url
		incomeid(join)? will people PAY for these alone?
	linkTYPE table?
		kind of link?

filenames table (for various uploads!)
	logo(jpeg, blob). or filename
	possibly pdf/word/something artwork itself? (blob)
		i'd rather have a filenameid. so it gets cached!
	

sponsorship form
	sponsorship table
		contactid (join)
		sessionid (join) -- these will change year to year!
		sponsortype
		incomeid(join) -- to handle payment... or join if many payments!
		userid, entered, updated(timestamp)
	sponsortype table
		description
		price
		contents (fields? field?)
			(like privs, one for each? or vertical columns?)
				i.e. will some user later on want to ADD to these, 
				w/o changing code?
				or will it necessarily involve code changes?
			join (to linktype table?)
			logo
			ad (join to adsize table)
			tickets quantity? join to tickettype table?
			banner (champions? individual? join to bannertype table?)
			anything else?

banners
	type?
	price?

tickets!!!
	what to do here?

flyers! (publicity)
	need to add an "need flyer" date? join to contactid
	and.. a "flyer put up" date, and user who did it

money:
	add to coa table?
		jointable?
		joinidfield?
		joinSTRUCT??!
		or... keep this in struct?
			could get ugly if there are multiple nested joins?
	could be joined to 
		ticket  (join ticket table, and join to an invitation?!), 
		generic business lead (join contacts table)
		ad (join ad table), 
		one of various forfeit fees (join familyid)
	handling
		aha! an "apply payment to" field WHICH IS REQUIRED!
			it pops up the relevant "apply" sub-screen.
				can add new one or apply to existing one.
			which basically throws up various options depending on popup
				this is a special case tho!!
		pop-up in case of business lead, since inputter won't know
			ad-id? must it join to that?
				nice if it had prices too... to verify check amount
				SO WE KNOW IT WAS PAID!
			raw cash donation is easy: just join to business lead
			it should show any unpaid stuff.
		leadid in case of invitation. 
			possibly with pop-up?
		and... tickets? what of tickets?
	will need a special-case checkEntry function, i'm certain
		to handle all the different weirdo cases
		callback?
	perhaps we'll have to handle it like a proper accounts-receivable!
		i.e. you'll have to "apply payments"
		

sub-view gui handling
	will probably need to have multiple structs, and a field to choose them
	possibly different callbacks too, 
		so state machine may become part of fieldstruct
	viewOne() shows many lines for ONE unit, on whatever key field it needs
		so... it'll show all the subsummaries under this one
		i.e. familyid, contactid, adid, flyerid, insid, licid, etc.
		stuff in this function MAY eventually get moved to struct
			at which point it'll be a generic viewOne()
		so it can show other things.
			i.e. it can be included and called from elsewhere
	viewMany() funct selects all and then shows all lines
		each line, instead of edit/delete, has View (viewone) foreach
			new deduced state: viewone
			it MUST somehow know which fieldstruct to use, too
		if there's only one for this family (or it doesn't have rights)
			go straight to the viewonly for only that one
	disptcher change: either dispatcher must know which struct
		for view, viewone, edit, delete, etc... for ALL
		what if it's in the struct?
			confusing: what if different entries w/different sturcts?
				i.e. edit, what the fuck do you show?
	do you encode the substructs in the struct?
		i.e. so showreprt can generate views programatically?
		and, so it can  be included from elsewhere!
		including: means it can be passed around
		joining: it MAY not be so easy to pass it around... collisions, etc
			augh. how to handle a joined struct from another file?! grr.
			gonna have to have the structs be joins, not embedded. damn.
	add handling!
		ONE-TO-ONE: just include it in the struct, like now with join tables!
			no changes. this is good.
		ONE-TO-MANY with ONE required
			how to check that the one is entered? auugh.
		ONE-TO-MANY with NO required
			make them save, then view/edit/add later.
				THIS IS UGLY THO! they might have to go thru several screens
			or an "add" button that saves, and shows the top level next
				the struct MUST be heirarchal then: so it knows.
				and so it knows what comes ABOVE it.
		MANY-TO-MANY: they'll have to go through a different screen. 	
			can i add it?
		where do add buttons go?
			in the top-level? in teh viewOne? in viewMany? using addButtons()?
	examples:
		insurance:
			view: if !$admin, call viewOne for this familyid
				else, show all with summary line, and VIEW(DETAIL?) button
			add: no top-level add, but sub-level adds for each
				i.e. add,edit/delete's like in viewone!
			viewone for FAMILY/LINE (what to call this?)
				show parent info (summary viewonly, edit if rasta privs!)
				show summary line for insurance, 
					with EDIT/DELETE button(if priv)
				show summary line for license 
					with EDIT/DELETE button(if priv)
		solicitation:
			view: all your contacts, or ALL contacts if $admin.
				show the basic stuff? or summary of other stuff
			add: the contact info. 
			viewOne shows the contact summary
				4 actions:
					add,view/edit/delete auction donation
					add,view/edit/delete ad (heh heh)
					add,view/edit/delete sponsorship (package)
					add,view/edit/delete flyer
		roster:
		auction(split):
			view: all your auctions (or all auctions if $admin)
			viewOne(): view that auction, and any sub-structs
					i.e. additional families!


report notes: these are getting hairy
	ad/flyer/link/etc will need to left join sponsorship packages (and session?)
	money will need to left join almost everything: 
		it is at least the center of springfest!
		any tracking of revenue back to families will be HAIRY!
			through any revenue-generating thing, back to family and/or user.
	

year-to-year things
	populate the sponsorship packages? or... do it automatically?


-------------------
ok, rearchitecture!

features:
	sessions for auth, instead of passing $auth through.
	nestable navigation: 
		keep track of the PAGE and PATH
	modular display: each object can display "views" from anywhere
	keep track of the STATE of each view: add/edit/delete/confirm
	keep track of auth stuff.

open questions:
	keep track of the path in through things, and back out?
		array? pop/push?
	handling nested forms? just nest the tables, but not the forms?
	re-associating the form fields with their relevant objects
	cool! can i do away with form buttons in reports? and just have a GET url with id?
		i.e. on edit, instead of getting vars from POST, get id, and fetch from db?
			then pass those thru to showForm()?
	


