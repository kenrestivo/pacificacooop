 notes on teh permissions redesign

openid auth? to be used in drupal in the futchum?
 
24 hours PHP/SQL
	new perms tables in database, to the new model
        rights
        	view
        	have in menu
        	edit
        	add
        	delete
        	post to public site
        	adminiser perms
        	
        on (range?)
        	mine
        	other peoples
        	other years
        
        to
        	user
        	group
	change ispermittedfield and getperms to use new model
	go through and change all the ispermittedfield() > ACCESS_FOO
		to instead do... what? a bit test?
			or make a new permtest() that checks against a bitmap
	
        

-----------

???
build a unit test of the existing permissions results
	for every combination of user, realm, table, field
		save the getperms for it

	matrix: user/group/realm/table/field/userlevel/grouplevel/menulevel/yearlevel		check that before and after results are EXACTLY the same!
	perm-modification-harness
	nice: the *only* functions which query the perms db are
		coopobj::getperms
		coopmenu::getreportperms
	save results from BEFORE query somewhere (python pickle?)
	do the modifications to change to the new db
		perhaps store them in the same script, or an sql script
	then run the *new* perms query, and compare/contrast


add a user name popup to the permissions screen
	so that you can check it for *any* user!
	edit links for admin, and here's a nice way to do it
	this requires adding this to the stack too


???
normalise the perms!
	normalize user/group perms. two separate tables, not one tabel!
	this userlevel/grouplevel/menulevel is horseshit
	make a RIGHTS table: 
		rightid, type (enum: owner/other/menu/year), level!
	easy normalisation, i think.	
	then the table/report/user perms link to these rights
the levels idea is utterly wrong
	there should be individual rights, which are *not* level-specific
	things like, show all schoolyears. that doesn't map to the existing system.
	menulevel becomes a menu "right"
	i like my moveboxes, but  checkboxes might be nicer
		grab from fb? they have their checkbox shit together.
	what sucks about this is that everything in my code needs to be re-done!
	my massive query then becomes several, which return lists of rights
		get all rights for this table/column/user combo


???
	do i have to whack old pages before migrating to this kind of system?
		it's in 60-some-odd pages
	the only place the db is queried is in getAuthLevel anyway.
	

right way to do realms:
	super-realm (area?) tags for them as 'springfest' or whatever.
		then i can make a FB checkbox thingus.
	yes, they're recursive. and i'll have to show that

	a tree structure in SQL! it is possible.
		but traversing it to calculate realms could be eerily difficult



admin section stuff
	changelog
	last/currently-logged-in-users
	permissions!!!
	password maint screens
		reset (almost done!)
			only this years? not easy. not even a good idea
			and an "are you sure" screen.
				don't bother with qf, i don't think.
			then save the change. using coopform process? or raw dbdo?
